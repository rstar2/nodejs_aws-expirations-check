# HOW TO USE:
#
# 1 Add environment variables for the various stages here
# 2 Rename this file to env.yml and uncomment its usage in the serverless.yml.
#    provider:
#       name: aws
#       runtime: nodejs8.10
#       stage: dev
#       region: us-east-1
#       # Load environment variables externally from 'env.yml' depending on the stage
#       environment: ${file(env.yml):${self:provider.stage}}
# 3 Make sure to not commit this file.

default: &def
  API_KEY: xxx

  # real NEEDED props
  AWS_SES_RECEIVER:
  AWS_SES_SENDER:
  DARK_SKY_API_KEY:
  TWILIO_ACCOUNT_SID:
  TWILIO_AUTH_TOKEN:
  TWILIO_RECEIVER:
  TWILIO_SENDER:

  # the VAPID PushNotification keys - the public is for the clients to register, the private and url are for the server to send notifications
  # configure VAPID key for instance with https://web-push-codelab.glitch.me/
  VAPID_PUBLIC_KEY:
  VAPID_PRIVATE_KEY:
  VAPID_BASE_URL:

dev:
  <<: *def
  # overwrite/extend the default 
  API_KEY: xxx
  # extend the default 
  API_KEY_NEW: xxx

prod:
  <<: *def
  # overwrite/extend the default 
  API_KEY: xxx
  # extend the default 
  API_KEY_NEW: xxx


env:
  # the stage used in serverless.yml
  # Note - there should be such section with taht name described in this file on root level
  AWS_STAGE:

  # 1. AWS_REGION is reserved env variable from AWS and cannot be set/changed
  # it is always provided in the function later
  # That's why we have to use it only internally and not deploy as env variable
  # 2. use as prop thta could be changed/set ony here and both Serverless-deploy and local AWS-SDK will use the same region
  # 3. this process.env.AWS_REGION is used internally by the AWS-SDK to configure its access to services like DynomoDB, etc.
  AWS_REGION:

  # NOTE!!! in order to use the 'aws-sdk' module (or the 'aws' cli)
  # we have to set some credentials. Easiest way is to create a new profile (in the .aws/credentials file)
  # that has credentials (e.g. key/secret) to an AWS IAM user with such credentials and who has
  # proper permissions/policies defined (in this case to access the DynamoDB table).
  # The 'AWS_PROFILE' environment variable is used to configure implicitly the 'aws-sdk'.
  AWS_PROFILE:

  # the secret "token" used to secure an allowed function to call another
  # also used as identifier for the invoking event
  # this env variable should be set to both functions
  AWS_LAMBDA_API_SECRET:

  # used to sign and verify JWT tokens for the authorization mechanizm (generated with require('bcryptjs').genSaltSync(10))
  AUTH_JWT_SECRET:
  # used to create hashes for passwords (generated with require('bcryptjs').genSaltSync(10))
  AUTH_PASSWORD_SALT:

  # used for implementing Google Analytics
  GOOGLE_ANALYTICS_ID:
